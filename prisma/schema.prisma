generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique // Unique email
  password  String // Hashed password
  role      Role     @default(USER) // Default role set to 'USER'
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  ACC
}

model ProductionCompanies {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  website String?
  email   String  @unique
  phone   String?

  projects ProductionCompanyProjects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectManagers {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String  @unique
  phone     String?

  projects ProjectManagerProjects[]
  crewMembers CrewMembers[] // Relation to CrewMembers

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clients {
  id                 Int     @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String  @unique
  phone              String?
  streetAddress      String?
  streetAddress2     String?
  city               String?
  state              String?
  zip                String?
  contactPersonFirst String?
  contactPersonLast  String?
  note               String?

  projects ClientProjects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Projects {
  id            Int      @id @default(autoincrement())
  projectName   String
  startDate     DateTime
  endDate       DateTime
  status        String
  projectNumber Int      @default(1000)

  productionCompanies ProductionCompanyProjects[]
  clients             ClientProjects[]
  projectManagers     ProjectManagerProjects[]
  callSheets          CallSheets[]
  crewMembers         ProjectCrewMembers[] // Many-to-Many relationship with CrewMembers

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductionCompanyProjects {
  productionCompanyId Int
  projectId           Int
  productionCompany   ProductionCompanies @relation(fields: [productionCompanyId], references: [id])
  project             Projects            @relation(fields: [projectId], references: [id])

  @@id([productionCompanyId, projectId])
}

model ProjectManagerProjects {
  projectManagerId Int
  projectId        Int
  projectManager   ProjectManagers @relation(fields: [projectManagerId], references: [id])
  project          Projects        @relation(fields: [projectId], references: [id])

  @@id([projectManagerId, projectId])
}

model ClientProjects {
  clientId  Int
  projectId Int
  client    Clients  @relation(fields: [clientId], references: [id])
  project   Projects @relation(fields: [projectId], references: [id])

  @@id([clientId, projectId])
}

model CallSheets {
  id             Int      @id @default(autoincrement())
  callSheetDate  DateTime
  shootLocation  String
  streetAddress  String?
  streetAddress2 String?
  city           String?
  state          String?
  zip            String?
  startTime      DateTime
  endTime        DateTime
  parkingNotes   String?

  projectId Int
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CrewMembers {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  rolePosition   String
  email          String  @unique
  phone          String?
  streetAddress  String?
  streetAddress2 String?
  city           String?
  state          String?
  zip            String?

  projectManagerId Int?
  projectManager   ProjectManagers? @relation(fields: [projectManagerId], references: [id])

  projects ProjectCrewMembers[] // Many-to-Many relationship with Projects

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectCrewMembers {
  projectId   Int
  crewMemberId Int
  project     Projects    @relation(fields: [projectId], references: [id])
  crewMember  CrewMembers @relation(fields: [crewMemberId], references: [id])

  @@id([projectId, crewMemberId])
}